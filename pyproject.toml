# ============================================================
# ü¶Ü DuckLearn ‚Äî Open Learning Framework powered by DuckDB
# ============================================================
# This file defines the complete project configuration:
#  - Metadata (name, version, description, authors)
#  - Runtime dependencies (libraries required for the app)
#  - Development dependency groups (tools, testing, playground)
#  - Tool configurations (Ruff, Commitizen, pre-commit)
#
# Notes:
# - Uses `uv` for dependency & environment management
# - Supports grouped dependencies for modular local installs
# ============================================================


# ------------------------------------------------------------
# üì¶ Project Metadata
# ------------------------------------------------------------
[project]
name = "ducklearn"
version = "0.2.0"
description = "DuckLearn ‚Äî an open learning framework powered by DuckDB."
readme = "README.md"
requires-python = ">=3.11"

authors = [
    { name = "Tomas Pecukevicius", email = "contact@pecuk.dev" }
]

license = { text = "Apache-2.0" }

keywords = [
    "duckdb",
    "machine-learning",
    "data",
    "education",
    "framework",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]


# ------------------------------------------------------------
# ‚öôÔ∏è Runtime Dependencies
# ------------------------------------------------------------
# These are packages required to RUN DuckLearn (not dev tools).
# They are installed when users run `uv sync --no-dev`.
dependencies = [
    "duckdb>=1.4.1",
    "fastapi>=0.120.0",
    "orjson>=3.11.4",
    "pathlib>=1.0.1",
    "platformdirs>=4.5.0",
    "pydantic>=2.12.3",
    "sqlglot>=27.28.1",
    "uvicorn>=0.38.0",
]


# ------------------------------------------------------------
# üîó Project Links (used by PyPI, docs, and metadata)
# ------------------------------------------------------------
[project.urls]
Homepage = "https://github.com/Tomosius/DuckLearn"
Repository = "https://github.com/Tomosius/DuckLearn"
Documentation = "https://github.com/Tomosius/DuckLearn/wiki"
Issues = "https://github.com/Tomosius/DuckLearn/issues"


# ------------------------------------------------------------
# üöÄ CLI Entry Point (optional)
# ------------------------------------------------------------
# Uncomment and adapt if you plan to expose a CLI tool.
# [project.scripts]
# ducklearn = "ducklearn.cli:main"


# ============================================================
# üß© Development Dependency Groups
# ============================================================
# These groups let you install only what you need:
#   uv sync --group lint --group hooks --group test
# or everything:
#   uv sync --all-groups
# ============================================================

[dependency-groups]

# Core dev group (you can leave this empty or use it for shared tools)
dev = [
    "poethepoet>=0.37.0",
    "rich>=14.2.0",
]

# ------------------------------------------------------------
# ü™ù Git / Workflow Tools
# ------------------------------------------------------------
# Used for commit conventions, changelog automation, and hooks.
hooks = [
    "commitizen>=4.9.1",      # conventional commits & changelog
    "pip-licenses>=5.5.0",    # generate THIRD_PARTY_LICENSES.md
    "pre-commit>=4.3.0",      # manage pre-commit hooks
]

# ------------------------------------------------------------
# üß™ Testing Frameworks
# ------------------------------------------------------------
# Tools used for running and managing tests.
test = [
    "pluggy>=1.6.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-html>=4.1.1",
    "pytest-rerunfailures>=16.1",
    "pytest-testmon>=2.1.3",
    "pytest-xdist>=3.8.0",
]

# ------------------------------------------------------------
# üßπ Linting, Formatting, Import Sorting
# ------------------------------------------------------------
# Ruff handles linting, code formatting, and import sorting in one.
lint = [
    "bandit>=1.8.6",
    "mypy>=1.18.2",
    "pydantic>=2.12.3",
    "pydocstyle>=6.3.0",
    "radon>=6.0.1",
    "ruff>=0.7.4",
    "safety>=3.6.2",
]

# ------------------------------------------------------------
# üß† Playground / Experimentation
# ------------------------------------------------------------
# Optional libraries for local exploration, notebooks, and ML demos.
playground = [
    "jupyterlab>=4.4.10",
    "marimo>=0.17.2",
    "scikit-learn>=1.7.2",
]


# ============================================================
# üßæ Tool Configurations
# ============================================================

# ------------------------------------------------------------
# ü™Ñ Commitizen ‚Äî Conventional Commits & Version Bumping
# ------------------------------------------------------------
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "uv"         # read/write version from pyproject via uv
update_changelog_on_bump = true # auto-update CHANGELOG.md on bump
major_version_zero = true       # allow 0.x versions
changelog_file = "CHANGELOG.md"
version_files = [
    "pyproject.toml:version",
    "frontend/package.json:version"
]

# ------------------------------------------------------------
# ü™ù Pre-commit
# ------------------------------------------------------------
# Hooks are defined externally in `.pre-commit-config.yaml`
[tool.pre-commit]


[tool.ruff]
line-length = 79
target-version = "py311"
extend-exclude = ["node_modules", "dist"]
src = ["src", "tests", "scripts"]

[tool.ruff.lint]
select = ["E", "F", "B", "I"]
ignore = ["E501"]  # ignore long lines
fixable = ["ALL"]


[tool.ruff.format]
indent-style = "space"
quote-style = "single"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy"]
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_defs = true


[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

# ------------------------------------------------------------
# üß† Poe the Poet ‚Äî Task Runner
# ------------------------------------------------------------

[tool.poe.tasks]

# Licenses
licenses.script = "scripts:Licenses.generate()"

# Setup
install.script = "scripts:Setup.install()" # install just dependencies
install_all.script = "scripts:Setup.install_all()" # install all dependencies from all Groups, setup Hooks and generate Licenses

# Updating
update.script = "scripts:Setup.update()" # Update All dependencies across all groups

# Python-only
lint_py.script = "scripts:Code_Quality.Lint.python()"
fmt_py.script = "scripts:Code_Quality.Format.python()"
sort_py.script = "scripts:Code_Quality.Sort.python()"
typecheck_py.script = "scripts:Code_Quality.TypeCheck.python()"
code_1.script = "scripts:Code_Quality.Python.basic()"
code_2.script = "scripts:Code_Quality.Python.normal()"
code_3.script = "scripts:Code_Quality.Python.full()"




# All-languages aggregators
lint.script = "scripts:Code_Quality.Lint.all()"
fmt.script = "scripts:Code_Quality.Format.all()"
sort.script = "scripts:Code_Quality.Sort.all()"
typecheck.script = "scripts:Code_Quality.TypeCheck.all()"
code.script = "scripts:Code_Quality.CodeQuality.all()"


# Testing

# Pyyhon
test.script = "scripts:Tests.run()"
test_full.script = "scripts:Tests.full()"
test_html.script = "scripts:Tests.html()"


# ---------------------
# Run commands
# ---------------------
run_b.script = "scripts.Run_Build:run_backend"
run_f.script = "scripts.Run_Build:run_frontend"
run.script   = "scripts.Run_Build:run_both"

# ---------------------
# Build commands
# ---------------------
build_b.script = "scripts.Run_Build:build_backend"
build_f.script = "scripts.Run_Build:build_frontend"
build.script   = "scripts.Run_Build:build_both"

# ---------------------
# Build wheel + package
# ---------------------
package.script = "scripts.Run_Build:package"
