Metadata-Version: 2.4
Name: ducklearn
Version: 0.2.0
Summary: DuckLearn â€” an open learning framework powered by DuckDB.
Author-email: Tomas Pecukevicius <contact@pecuk.dev>
License: Apache-2.0
Project-URL: Homepage, https://github.com/Tomosius/DuckLearn
Project-URL: Repository, https://github.com/Tomosius/DuckLearn
Project-URL: Documentation, https://github.com/Tomosius/DuckLearn/wiki
Project-URL: Issues, https://github.com/Tomosius/DuckLearn/issues
Keywords: duckdb,machine-learning,data,education,framework
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: NOTICE
Requires-Dist: duckdb>=1.4.1
Requires-Dist: fastapi>=0.120.0
Requires-Dist: sqlglot>=27.28.1
Requires-Dist: uvicorn[standard]>=0.38.0
Dynamic: license-file

# ðŸ¦† DuckLearn
### An Open Learning Framework Powered by DuckDB

---

## ðŸ“˜ Overview

**DuckLearn** is an experimental open learning framework built on top of [DuckDB](https://duckdb.org).
It aims to make data exploration, analysis, and lightweight machine learning accessible directly within the DuckDB ecosystem â€” with a focus on educational use, transparency, and modular design.

> Status: **Alpha** â€” expect rapid iteration.

---

## ðŸš€ Features

- ðŸª¶ **DuckDB-native**: built on DuckDBâ€™s analytical engine
- ðŸ§© **Modular design**: extendable with Pro and Private editions
- ðŸ§  **Learning-oriented**: simple, clear APIs and examples
- ðŸ§¾ **Modern setup**: powered by [`uv`](https://docs.astral.sh/uv) (fast dependency + env manager)
- ðŸ§° **Dev workflow**: Commitizen, pre-commit hooks, and automated thirdâ€‘party license report

---

## ðŸ§­ Quick Start (Powered by uv)

DuckLearn uses [**uv**](https://docs.astral.sh/uv/) as its dependency and environment manager.
It replaces `pip` and `venv` with faster resolution and reproducible environments.

### 1) Install uv

If you donâ€™t have it yet:

```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
```

### 2) Clone the repository

```bash
git clone https://github.com/Tomosius/DuckLearn.git
cd DuckLearn
```

### 3) One-command setup

```bash
make setup
```

This will automatically:

- install all project dependencies and developer tools (via `uv sync`)
- install Git hooks for commit message validation (pre-commit / Commitizen)
- generate / refresh `THIRD_PARTY_LICENSES.md`

Thatâ€™s it â€” youâ€™re ready to code ðŸŽ‰

---

## ðŸ§© Development Workflow

Common tasks (via `Makefile`):

| Command        | Description                                         |
|----------------|-----------------------------------------------------|
| `make setup`   | Install deps, Git hooks, and generate license list  |
| `make licenses`| Refresh `THIRD_PARTY_LICENSES.md`                   |
| `make hooks`   | Run all pre-commit hooks on the codebase            |
| `make bump`    | Bump version + changelog using Commitizen           |
| `make clean`   | Remove caches and build artifacts                   |
| `make help`    | Show all available tasks                            |

Conventional Commits are encouraged. Use:

```bash
cz commit
# or
cz c
```

To bump versions and update the changelog based on commit history:

```bash
make bump
# (equivalent to: uv run cz bump)
```

---

## ðŸ§¾ License & Notices

- Project license: **Apache License 2.0** â€” see [LICENSE](./LICENSE)
- Acknowledgements & attribution: see [NOTICE](./NOTICE)
- Full dependency license report: see [THIRD_PARTY_LICENSES.md](./THIRD_PARTY_LICENSES.md)

If you distribute binaries, wheels, or containers, please include the three files above.

---

## ðŸ§  Project Structure

```
DuckLearn/
â”œâ”€â”€ LICENSE
â”œâ”€â”€ NOTICE
â”œâ”€â”€ THIRD_PARTY_LICENSES.md
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ README.md
â”œâ”€â”€ src/
â”‚   â””â”€â”€ ducklearn/
â””â”€â”€ tests/
```

---

## ðŸ’¬ Contributing

Contributions are welcome!

1. Run `make setup`
2. Use `cz commit` for Conventional Commits
3. Run `make hooks` before opening a PR

Feel free to open issues or discussions in the repository.

---

## ðŸ‘¤ Author

**Tomas Pecukevicius**  
ðŸ“§ contact@pecuk.dev  
ðŸ”— https://github.com/Tomosius
